class Solution:
    def combinationSum(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        '''
        [],0 = [[]]
        [],1 = []
        '''
        candidates.sort()
        if not candidates and target == 0: return [[]]
        elif not candidates: return []
        else:
            ret = []
            index = 0
            stack = []

            while index < len(candidates) or not not stack:
                if index < len(candidates) and not stack:
                    if candidates[index] > target: break
                    elif candidates[index] == target:
                        ret.append([candidates[index]])
                        break
                    else:
                        target -= candidates[index]
                        stack.append(candidates[index])
                elif index == len(candidates) and not not stack:
                    x = stack.pop()
                    target += x
                    index = candidates.index(x) + 1
                else:
                    if candidates[index] < target:
                        target -= candidates[index]
                        stack.append(candidates[index])
                    elif candidates[index] == target:
                        a = []
                        a += stack
                        a.append(candidates[index])
                        ret.append(a)
                        x = stack.pop()
                        target += x
                        index = candidates.index(x) + 1
                    else:
                        x = stack.pop()
                        target += x
                        index = candidates.index(x) + 1

            return ret

