# Probably correct
class Solution:
    def minWindow(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: str
        """
        if not s or not t:
            return ""
        ret = []
        i = j = 0
        dt = {}
        for item in t:
            if item not in dt:
                dt[item] = 1
            else:
                dt[item] += 1
        while i < len(s):
            sample = ""
            sample += s[i:j+1]
            k = 0
            while k < len(sample):
                if sample[k] not in t:
                    sample = sample[:k] + sample[k+1:]
                else:
                    k += 1
            d = {}
            for key in sample:
                if key not in d:
                    d[key] = 1
                else:
                    d[key] += 1
            judge = True
            for key in dt:
                if key not in d or d[key] < dt[key]:
                    judge = False
                    break
            if judge:
                ret.append(s[i:j+1])
                i += 1
            else:
                if j == len(s) -1:
                    break
                else:
                    j += 1
        if not ret:
            return ""
        
        minindex = 0
        j = 1
        while j < len(ret):
            if len(ret[j]) < len(ret[minindex]):
                minindex = j
            j += 1
        return ret[minindex]

