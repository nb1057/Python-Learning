class Solution:
    def exist(self, board, word):
        """
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """
        def doexist(index, i, j, covered):
            covered.append([i, j])
            index += 1
            if index == len(word):
                return True
            if 0 <= i+1 < m and board[i+1][j] == word[index] and [i+1, j] not in covered:
                if doexist(index, i+1, j, covered):
                    return True
            if 0 <= i-1 < m and board[i-1][j] == word[index] and [i-1, j] not in covered:
                if doexist(index, i-1, j, covered):
                    return True
            if 0 <= j+1 < n and board[i][j+1] == word[index] and [i, j+1] not in covered:
                if doexist(index, i, j+1, covered):
                    return True
            if 0 <= j-1 < n and board[i][j-1] == word[index] and [i, j-1] not in covered:
                if doexist(index, i, j-1, covered):
                    return True
            covered.pop()
            index -= 1
            return False

        if not board and not word:
            return True
        elif not board:
            return False
        elif not word:
            pass
        m = len(board)
        n = len(board[0])
        # start list construction
        start_point = []
        for i in range(len(board)):
            for j in range(len(board[i])):
                if board[i][j] == word[0]:
                    start_point.append([i, j])
        if not start_point:
            return False
        for item in start_point:
            if doexist(0, item[0], item[1], []):
                return True
        return False




