from collections import defaultdict


class Solution:
    def merge(self, l:'list[list[int]]') -> 'list[list[int]]':
        l.sort(key=lambda x:x[0])
        i = 0
        while i < len(l)-1:
            if l[i][1] == l[i+1][0]:
                l[i][1] = l[i+1][1]
                l.pop(i+1)
            else:
                i += 1
        return l

    def isRectangleCover(self, rectangles: 'list[list[int]]') -> 'bool':
        left_line = min(x[0] for x in rectangles)
        right_line = max(x[2] for x in rectangles)
        bottom_line = min(x[1] for x in rectangles)
        top_line = max(x[3] for x in rectangles)
        memo = defaultdict(list)
        for rectangle in rectangles:
            memo[(True, rectangle[0])].append([rectangle[1],rectangle[3]])
            memo[(False, rectangle[2])].append([rectangle[1],rectangle[3]])
        l = sorted(x[0] for x in rectangles)
        l = list(set(l))
        for i in l:
            memo[(True, i)] = self.merge(memo[(True, i)])
            memo[(False, i)] = self.merge(memo[(False, i)])
            if i == left_line and memo[(True, i)] != [[bottom_line, top_line]]:
                return False
            if i == right_line and memo[(False, i)] != [[bottom_line, top_line]]:
                return False
            if i not in [left_line, right_line] and memo[(True, i)] != memo[(False, i)]:
                return False
        return True
