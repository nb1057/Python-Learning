class Solution:
    def solveSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: void Do not return anything, modify board in-place instead.
        """

        def board_row_column_switch(boardx):
            boardy = []  # board column
            for i in range(9):
                boardy.append([])
                for j in range(9):
                    boardy[i].append(boardx[j][i])
            return boardy

        def board_row2block(boardx):
            boardy = [[], [], [], [], [], [], [], [], []]  # board block
            for i in range(9):
                for j in range(9):
                    boardy[i // 3 * 3 + j // 3].append(boardx[i][j])
            return boardy

        def board_block2row(boardx):
            boardy = []
            for i in range(9):
                boardy.append([])
                for j in range(9):
                    boardy[i].append([])

            for i in range(9):
                for j in range(9):
                    boardy[i // 3 * 3 + j // 3][i % 3 * 3 + j % 3] = boardx[i][j]
            return boardy

        def method1(boardx):    #simply method, exclude duplicated numbers
            for i in range(9):
                sample1 = []
                sample1 += boardx[i]
                for j in range(9):
                    if len(boardx[i][j]) == 1:
                        digit = boardx[i][j]
                        for k in range(9):
                            if k == j: continue
                            if digit in boardx[i][k]:
                                index = boardx[i][k].index(digit)
                                boardx[i][k] = boardx[i][k][:index]+boardx[i][k][index+1:]
                sample2 = []
                sample2 += boardx[i]
                while sample1 != sample2:
                    sample1 = []
                    sample1 += sample2
                    for j in range(9):
                        if len(boardx[i][j]) == 1:
                            digit = boardx[i][j]
                            for k in range(9):
                                if k == j: continue
                                if digit in boardx[i][k]:
                                    index = boardx[i][k].index(digit)
                                    boardx[i][k] = boardx[i][k][:index]+boardx[i][k][index+1:]
                    sample2 = []
                    sample2 += boardx[i]
            return boardx


        #initial
        for i in range(9):
            for j in range(9):
                if board[i][j] == '.': board[i][j] = "123456789"

        sample1 = []
        sample1 += board
        board = method1(board)
        board_c = board_row_column_switch(board)
        board_c = method1(board_c)
        board = board_row_column_switch(board_c)
        board_b = board_row2block(board)
        board_b = method1(board_b)
        board = board_block2row(board_b)
        sample2 = []
        sample2 += board
        while sample1 != sample2:
            sample1 = []
            sample1 += sample2
            board = method1(board)
            board_c = board_row_column_switch(board)
            board_c = method1(board_c)
            board = board_row_column_switch(board_c)
            board_b = board_row2block(board)
            board_b = method1(board_b)
            board = board_block2row(board_b)
            sample2 = []
            sample2 += board
        return board


s = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
p = Solution()
print(p.solveSudoku(s))
