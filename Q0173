#Definition for a binary tree node.
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None


class BSTIterator:
    def __init__(self, root: TreeNode):
        self.obj = root

    def next(self) -> int:
        """
        @return the next smallest number
        """
        root = self.obj
        if root.left is None and root.right is None:
            ans = root.val
            self.obj = None
            return ans
        elif root.left is None:
            ans = root.val
            self.obj = root.right
            return ans
        else:
            tmp = root
            while tmp.left.left is not None:
                tmp = tmp.left
            ans = tmp.left.val
            tmp.left = tmp.left.right
            return ans

    def hasNext(self) -> bool:
        """
        @return whether we have a next smallest number
        """
        return self.obj is not None
    

# Your BSTIterator object will be instantiated and called as such:
# obj = BSTIterator(root)
# param_1 = obj.next()
# param_2 = obj.hasNext()
