from collections import defaultdict


# Definition for a Node.
class Node:
    def __init__(self, val, neighbors):
        self.val = val
        self.neighbors = neighbors


class Solution:
    def cloneGraph(self, node: 'Node') -> 'Node':
        if node is None:
            return node
        d = defaultdict(Node)  # relationship between old nodes and new nodes
        queue = [node]
        visited_list = [node]
        while queue:
            x = queue.pop(0)
            new_val = x.val
            d[x] = Node(new_val, [])
            for item in x.neighbors:
                if item not in visited_list:
                    visited_list.append(item)
                    queue.append(item)

        for item in visited_list:
            for element in item.neighbors:
                d[item].neighbors += [d[element]]

        return d[node]

