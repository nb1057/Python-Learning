#Probably Correct
class Solution:
    def addOperators(self, num: str, target: int) -> list:
        ret = []
        L = len(num)
        for i in range(L):
            tmp = self.comb(L-1, i)
            while tmp:
                tmp_position = tmp.pop(0)  # list[int]
                tmp_operator = self.opelist(i)  # list[str]
                for j in range(len(tmp_position)):
                    tmp_position[j] += j
                for ope_str in tmp_operator:
                    tmp_str = num  # str
                    k = 0
                    while k < len(ope_str):
                        tmp_str = tmp_str[:tmp_position[k]+1] + ope_str[k] + tmp_str[tmp_position[k]+1:]
                        if self.string_check(tmp_str) and eval(tmp_str) == target:
                            ret += [tmp_str]
                        k += 1
        return ret

    def opelist(self, num: int) -> list:
        if num == 0:
            return []
        elif num == 1:
            return ['+', '-', '*']
        else:
            tmp = self.opelist(num-1)
            ret = []
            while tmp:
                x = tmp.pop()
                ret += [x + "+"] + [x + "-"] + [x + "*"]
            return ret

    def comb(self, x: int, y: int) -> list:
        ret = []
        if x < y or y == 0:
            return ret
        if y == 1:
            for i in range(x):
                ret += [[i]]
            return ret
        tmp = self.comb(x-1, y-1)
        for item in tmp:
            item.append(x-1)
        ret += tmp
        tmp = self.comb(x-1, y)
        ret += tmp
        return ret

    def string_check(self, s: str) -> bool:
        i = 0
        j = 1
        while j < len(s):
            if s[j] in ["+", "-", "*"]:
                if int(s[i:j]) != 0 and int(s[i]) == 0:
                    return False
                else:
                    i = j + 1
                    j += 1
            else:
                j += 1
        if int(s[i:]) != 0 and int(s[i]) == 0:
            return False
        return True
