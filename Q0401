from collections import defaultdict
import copy


class Solution:
    def readBinaryWatch(self, num: 'int') -> 'list[str]':
        memo = defaultdict(list)

        def combine(x: 'int', y:'int') -> 'list': # take y items from x items
            if (x,y) in memo.keys():
                return memo[x, y]
            if y == 0:
                return [[0 for i in range(x)]]
            if x == y:
                return [[1 for i in range(x)]]
            if x > y:
                tmp1 = copy.deepcopy(combine(x-1, y))
                tmp2 = copy.deepcopy(combine(x-1, y-1))
                for item in tmp1:
                    item.insert(0, 0)
                for item in tmp2:
                    item.insert(0, 1)
                memo[x, y] = tmp1 + tmp2
                return memo[x, y]

        def gethour(x: 'int') -> 'list[int]':
            if x == 0:
                return [0]
            if x == 1:
                return [1,2,4,8]
            if x == 2:
                return [3,5,6,9,10]
            if x == 3:
                return [7,11]
            return []

        def getminute(x: 'int') -> 'list[int]':
            ret = []
            l = combine(6, x)
            for item in l:
                digit = 0
                while item:
                    digit *= 2
                    digit += item.pop(0)
                if 0 <= digit < 60:
                    ret.append(digit)
            return ret

        ret = []

        for i in range(0, num+1):
            minutelist = []
            hourlist = []
            j = num - i
            if i > 4:
                break
            if j >= 6:
                continue
            minutelist += getminute(j)
            hourlist += gethour(i)
            for hour in hourlist:
                for minute in minutelist:
                    hour_string = str(hour)
                    minute_string = str(minute) if 10 <= minute < 60 else "0" + str(minute)
                    ret.append(hour_string + ':' + minute_string)
        return ret
