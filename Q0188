class Solution:
    def maxProfit(self, k: int, prices: list) -> int:
        if k == 0 or len(prices) < 2: return 0
        p = []
        ret = 0
        for i in range(len(prices)-1):
            p.append(prices[i+1]-prices[i])
        i = 0
        while i < len(p):
            if p[i] == 0: p.pop(i)
            else: i += 1
        i = 0
        while i < len(p) - 1:
            if p[i]*p[i+1] > 0: p[i] += p.pop(i+1)
            else: i += 1

        if len(p) == 0: return 0
        if len(p) == 1 and p[0] <= 0: return 0
        elif len(p) == 1: return p[0]
        elif len(p) == 2: return max(p)
        elif len(p) == 3 and p[0] < 0: return p[1]
        elif len(p) == 3: pass
        else:
            if p[0] < 0: p.pop(0)
            if p[-1] < 0: p.pop()

        if k >= (len(p)+1)/2:
            for i in range(0, len(p), 2):
                ret += p[i]
            return ret
        else:
            N = (len(p)+1)/2 - k
            while N > 0:
                tmp_index = 0
                i = 0
                while i < len(p):
                    if abs(p[i]) < abs(p[tmp_index]): tmp_index = i
                    i += 1
                if tmp_index == 0: p = p[2:]
                elif tmp_index == len(p) - 1: p = p[:len(p)-2]
                else:
                    p[tmp_index] += p[tmp_index-1] + p[tmp_index+1]
                    p.pop(tmp_index+1)
                    p.pop(tmp_index-1)
                N -= 1
        for i in range(0,len(p),2):
            ret += p[i]
        return ret
