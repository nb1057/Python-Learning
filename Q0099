# Definition for a binary tree node.
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None


class Solution:
    def recoverTree(self, root):
        """
        :type root: TreeNode
        :rtype: void Do not return anything, modify root in-place instead.
        """

        def node2list(node):
            ret = []
            if node == None:
                return ret
            else:
                ret += node2list(node.left)
                ret.append(node.val)
                ret += node2list(node.right)
                return ret

        def getnode(val, treeroot):
            if treeroot == None:
                return 0
            if val == treeroot.val:
                return treeroot
            if getnode(val, treeroot.left) != 0:
                return getnode(val, treeroot.left)
            if getnode(val, treeroot.right) != 0:
                return getnode(val, treeroot.right)
            return 0
            
        l1 = node2list(root)
        i = 0
        while i < len(l1) - 1:
            if l1[i] > l1[i + 1]:
                if l1[i] > l1[len(l1) - 1]:
                    j = len(l1)
                else:
                    for j in range(i + 2, len(l1)):
                        if l1[i] < l1[j]:
                            break
                break
            else:
                i += 1
        val1 = l1[i]
        val2 = l1[j - 1]
        node1 = getnode(val1, root)
        node2 = getnode(val2, root)
        node1.val, node2.val = node2.val, node1.val


