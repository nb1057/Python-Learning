# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def rotateRight(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        if head==None:
            return head
        count=0
        cur=head
        while cur!=None:
            count+=1
            cur=cur.next
        k=k%count
        if k==0:
            return head
        cur=head
        for i in range(count-k-1):
            cur=cur.next
        new_last=cur
        cur=cur.next
        new_head=cur
        for i in range(k-1):
            cur=cur.next
        last=cur
        new_last.next=last.next
        last.next=head
        return new_head
        
