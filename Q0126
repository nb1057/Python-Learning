from collections import defaultdict


class Solution:
    def findLadders(self, beginWord: 'str', endWord: 'str', wordList: 'list[str]') -> 'list[list[str]]':
        if endWord not in wordList:
            return []
        length = len(beginWord)
        d = defaultdict(list)
        for item in wordList:
            for i in range(length):
                d[item[:i] + '*' + item[i+1:]].append(item)
        visited_route_list = defaultdict(list)
        visited_route_list[beginWord].append([beginWord])
        queue = [(beginWord, [beginWord])]
        ret = []
        while queue:
            word, routelist = queue.pop(0)
            for i in range(length):
                tmp_word = word[:i] + '*' + word[i+1:]
                for item in d[tmp_word]:
                    if item == endWord:
                        if not ret:
                            ret.append(routelist + [endWord])
                            minilength = len(routelist) + 1
                        elif minilength == len(routelist) + 1:
                            ret.append(routelist+[endWord])
                        else:
                            return ret
                    if item not in visited_route_list or ((routelist + [item]) not in visited_route_list[item]) and len(visited_route_list[item][0]) - 1 == len(routelist):
                        visited_route_list[item].append(routelist + [item])
                        queue.append((item, routelist + [item]))
        return []




