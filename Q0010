#not guarenteed correct

class Solution:
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        if not s and not p:  # both empty
            return True
        elif not p:  # only p empty
            return False
        elif not s and (not not p):  # only s empty
            if len(p) == 1:
                return False
            elif len(p) == 2:
                if p[0] != '*' and p[1] == '*':
                    return True
                else:
                    return False
            else:
                if p[0] != '*' and p[1] == '*':
                    return self.isMatch(s, p[2:])
                else:
                    return False
        else:  # both p,s not empty
            sindex = 0
            pindex = 0
            for pindex in range(len(p)):
                if pindex < len(p) - 1:  # pindex is not the last valid index
                    if p[pindex] == '*':  # '**','*.','*a'
                        return False
                    elif p[pindex:pindex+2] == '.*':  # '.*'
                        '''
                        '.*' could be NULL or any length of a string
                        '''
                        for x in range(sindex, len(s) + 1):
                            if self.isMatch(s[x:], p[pindex + 2:]):
                                return True
                        return False
                    elif p[pindex] == '.':  # '.a','..'
                        return self.isMatch(s[sindex+1:], p[pindex+1:])
                    elif p[pindex + 1] == '*':  # 'a*'
                        if self.isMatch(s[sindex:], p[pindex + 2:]):  # zero times of '*'
                            return True
                        elif s[sindex] != p[pindex]:
                            return False
                        elif sindex + 1 == len(s):
                            return self.isMatch('', p[pindex + 2:])
                        else:  # '*' is at least 1, s[sindex]==p[pindex], s[sindex] is not at last
                            while s[sindex] == s[sindex + 1]:
                                return self.isMatch(s[sindex+1:],p[pindex:])
                            return self.isMatch(s[sindex + 1:], p[pindex + 2:])
                    else:  # 'a.','aa'
                        if p[pindex] == s[sindex]:
                            return self.isMatch(s[sindex+1:], p[pindex+1:])
                        else:
                            return False
                else:  # pindex is the last index
                    if p[pindex] == '*':
                        return False
                    elif p[pindex] == '.':
                        return self.isMatch(s[sindex+1:], p[pindex+1:])
                    else:
                        if p[pindex] == s[sindex]:
                            return self.isMatch(s[sindex+1:], p[pindex+1:])
                        else:
                            return False
            
            
