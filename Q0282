class Solution:
    def addOperators(self, num: str, target: int) -> 'List[str]':
        N = len(num)
        ret = []

        def recurse(index, prev_operand, cur_operand, value, string: 'list'):
            if index == N:
                if value == target and cur_operand == 0:
                    ret.append(''.join(string[1:]))
                return
            cur_operand = cur_operand * 10 + int(num[index])
            str_op = str(cur_operand)

            if cur_operand > 0:
                recurse(index+1, prev_operand, cur_operand, value, string)

            string.append('+')
            string.append(str_op)
            recurse(index+1, cur_operand, 0, value+cur_operand, string)
            string.pop()
            string.pop()

            if string:
                string.append('-')
                string.append(str_op)
                recurse(index+1, -cur_operand, 0, value-cur_operand, string)
                string.pop()
                string.pop()

                string.append('*')
                string.append(str_op)
                recurse(index+1, cur_operand*prev_operand, 0, value - prev_operand + prev_operand*cur_operand, string)
                string.pop()
                string.pop()

        recurse(0, 0, 0, 0, [])
        return ret

