class Solution:
    def calculate(self, s: str) -> int:
        def letsgo(s: str) -> str:
            num_list = []
            op_list = []
            i = 1
            j = -1
            while i < len(s):
                if s[i] == "+" or s[i] == '-':
                    num_list.append(s[j+1:i])
                    op_list.append(s[i])
                    j = i
                i += 1
            num_list.append(s[j+1:])
            while op_list:
                op = op_list.pop(0)
                num1 = num_list.pop(0)
                num2 = num_list.pop(0)
                if op == '+':
                    num3 = str(int(num1)+int(num2))
                else:
                    num3 = str(int(num1)-int(num2))
                num_list.insert(0, num3)
            return num_list.pop()

        # return 0 if error occurs
        if s.count('(') != s.count(')'): return 0

        while s.count('+') != 0 or s.find('-', 1) != -1 or s.count('(') != 0 or s.count(')') != 0:

            while '++' in s or '--' in s or '+-' in s or '-+' in s:
                if s.find('++') != -1:
                    u = s.find('++')
                    s = s[:u] + '+' + s[u + 2:]
                elif s.find('+-') != -1:
                    u = s.find('+-')
                    s = s[:u] + '-' + s[u + 2:]
                elif s.find('-+') != -1:
                    u = s.find('-+')
                    s = s[:u] + '-' + s[u + 2:]
                else:
                    u = s.find('--')
                    s = s[:u] + '+' + s[u + 2:]

            if s.count('(') == 0:
                s = letsgo(s)
            else:
                index1 = s.rfind('(')
                index2 = s.find(')', index1)
                s = s[:index1] + letsgo(s[index1+1:index2]) + s[index2+1:]

        return int(s)

