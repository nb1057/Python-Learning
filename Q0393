class Solution:
    def validUtf8(self, data: 'list[int]') -> 'bool':
        i = 0
        while i < len(data):
            if self.translate(data[i])[0] == '0':
                i += 1
            elif i+1 < len(data) and self.translate(data[i])[:3] == '110' and self.translate(data[i+1])[:2] == '10':
                i += 2
            elif i+2 < len(data) and self.translate(data[i])[:4] == '1110' and self.translate(data[i+1])[:2] == '10' \
                    and self.translate(data[i+2])[:2] == '10':
                i += 3
            elif i + 3 < len(data) and self.translate(data[i])[:5] == '11110' and self.translate(data[i+1])[:2] == '10' \
                    and self.translate(data[i+2])[:2] == '10' and self.translate(data[i+3])[:2] == '10':
                i += 4
            else:
                return False
        return True

    def translate(self, x:'int') -> 'str': # 0 <= x < 256
        ans = bin(x)[2:]
        return (8-len(ans))*'0' + ans if len(ans) < 8 else ans
